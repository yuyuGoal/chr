module;
entity user {
    mutable name;
    key id: byte_array;
}

entity follower {
    index user;
    index follower: user;
    key user, follower;
}

entity post {
    timestamp = op_context.last_block_time;
    index user;
    content: text;
}

function format_user(user) = "%s#%s".format(user.name, user.id.to_hex().sub(0, 5));
function require_is_signer(pubkey) = require(op_context.is_signer(pubkey), "User must sign this operation");
function require_user(id: byte_array) = require(user @? { id }, "User with id %b does not exist".format(id));
function limit_content(content: text) = require(content.size() <= 255, "A post cannot be longer than 255 letters");

operation create_user(name, pubkey) {
    create user( name = name, id = pubkey );
}

operation make_post(user_id: byte_array, content: text) {
    require_is_signer(user_id);
    limit_content(content);
    create post(
        user @ { user_id },
        content
    );
}

operation follow_user(user_id: byte_array, follow_id: byte_array) {
    require_is_signer(user_id);
    val user = user @ { user_id };
    val follow = user @ { follow_id };
    create follower(
        user = follow,
        follower = user
    );
}

operation unfollow_user(user_id: byte_array, unfollow_id: byte_array) {
    require_is_signer(user_id);
    val user = user @ { user_id };
    val unfollow = user @ { unfollow_id };
    delete follower @? { .user == unfollow, .follower == user };
}

query get_user_name(user_id: byte_array): text {
    return format_user(require_user(user_id));
}

query get_user_id(name: text): byte_array {
    return user @ { .name == name } (.id);
}

query get_followers_count(user_id: byte_array): integer {
    return follower @ { .user == require_user(user_id) } (@sum 1);
}

query get_following_count(user_id: byte_array): integer {
    return follower @ { .follower == require_user(user_id) } (@sum 1);
}

query is_following(my_id: byte_array, your_id: byte_array) =
    exists(follower @? { .user.id == your_id, .follower.id == my_id });

struct post_dto {
    timestamp;
    user: struct<user>;
    content: text;
}

query get_posts(
    user_id: byte_array,
    pointer: integer,
    n_posts: integer
): (pointer: integer, posts: list<post_dto>) {
    val posts = (user, follower, post) @* {
        user.id == user_id,
        follower.follower == user,
        post.user == follower.user
    } (
        @sort_desc @omit post.rowid,
        post_dto(
            post.timestamp,
            post.content,
            user = post.user.to_struct()
        )
    ) offset pointer limit n_posts;

    return (
        pointer = pointer + posts.size(),
        posts = posts
    );
}

query get_users(pointer: integer, n_users: integer) {
    val users = user @* {} (name = format_user($), id = .id) offset pointer limit n_users;
    return (
        pointer = pointer + users.size(),
        users = users
    );
}
